def propfile
def FAILED_STAGE
pipeline {
	agent {
        kubernetes {
			    label 'SpringBootRestApp'
			    defaultContainer 'jnlp'
			    yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  containers:
  - name: gradle
    image: gradle:3.5-jdk8-alpine
    command:
    - cat
    tty: true
"""
        }
    }
	stages {
		stage("Read Properties") {
			steps {
				script {
					propfile = readProperties(file: './project.properties')
				}
			}
		}
		stage("Deploy") {
			when { expression {env.GIT_BRANCH == 'dev' || env.GIT_BRANCH == 'release'|| propfile['feature_deploy'] == "true" }}
			steps {
				container('gradle') {
					script {
						withMaven(maven: 'MAVEN-3.6.3') {
							FAILED_STAGE=env.STAGE_NAME
							if (propfile['feature_deploy'] == "true" ) {
								USERNAME=propfile['target_user']
								HOSTS=propfile['target_host']
								//HOSTS=propfile['testing_host']
							}
							if (env.GIT_BRANCH == 'dev' ) {
								USERNAME=propfile['target_user']
								HOSTS=propfile['target_host']
							}
							if (env.GIT_BRANCH == 'release') {
								USERNAME=propfile['target_user']
								HOSTS=propfile['target_host']
							}
							HOSTS.tokenize(',').each { HOSTNAME ->
								echo 'Use the lines below when we switch to the actual EJB repo'
								echo "${HOSTNAME}"
								echo 'I am deploying the artifact into the target environment ${HOSTNAME} as user ${USERNAME}'
								echo 'Replace all the lines below for EJB and add the parameters to propfile and make refrences below'
								echo 'Accom logic for multiple env and mult servers in each env based on the branch name'
								echo 'shutting down the tomcat ESB server'
								/*
             							  sh "mkdir -p $WORKSPACE/artifacts"
								echo "Pulling artifact from the repository to deploy"
								sh "mvn org.apache.maven.plugins:maven-dependency-plugin:2.8:get \
									-DrepoUrl=https://archiva.sgnt.devops.accentureanalytics.com/repository/snapshots \
									-Dartifact=io.buildpacks.example:sample:EJB_DevOps-dev-build-6-SNAPSHOT:jar -Ddest=$WORKSPACE/artifacts/myfile.jar"
								sh "ls -la $WORKSPACE/artifacts"
               							 /*
								/* sh 'ssh ${USERNAME}@${HOSTNAME} "$ESB_BIN_PATH stop || sleep 20"'
								echo 'force stop any remaining mule process'
								sh 'ssh ${USERNAME}@${HOSTNAME} "if [[ $(ps aux | grep /opt/mule/latest/ | grep -vc grep)  > 0 ]]; then "kill -9 $(ps -ef|pgrep -f "/opt/mule/latest/bin")"; else echo "do nothing"; fi"' 
								*/
								echo 'tomcat server stopped'
								echo 'copying the tar file from jenkins to deployment directory on app and remove the old folders and untarring the new jar and war files'
								/* sh 'scp -rp $WORKSPACE/artifacts/artifact.tar $DEPLOYMENT_USER@$DEPOYMENT_SERVER:$DEPLOYMENT_STAGE_DIR/'
								sh 'ssh ${USERNAME}@${HOSTNAME} "cd $DEPLOYMENT_STAGE_DIR && rm -rf *.war *.jar"'
								sh 'ssh ${USERNAME}@${HOSTNAME} "cd $DEPLOYMENT_STAGE_DIR && tar -xvzf artifact.tar && rm -rf *.jar"'
								sh 'ssh ${USERNAME}@${HOSTNAME} "cd $}DEPLOYMENT_DIR} && rm -rf ${ESB_WAR_FOLDERS} && cp -rp ${DEPLOYMENT_STAGE_DIR}/*.war $DEPLOYMENT_DIR"' 
								*/
								echo 'Deployment has been completed'
								echo 'starting the tomcat ESB server'
								/* sh 'ssh ${USERNAME}@${HOSTNAME} "${ESB_BIN_PATH start}"'
								sh 'ssh ${USERNAME}@${HOSTNAME} "sleep 20"' 
								*/
								echo 'tomcat server started'
							
								
							}
						}	
					}
				}
			}
		}
		stage('Post Deploy Tests') {
			when { expression {env.GIT_BRANCH == 'dev' || env.GIT_BRANCH == 'release'|| propfile['feature_deploy'] == "true" }}
			parallel {
				stage('Smoke Test') {
					steps {
						script {
							FAILED_STAGE=env.STAGE_NAME
							echo "I am running Smoke Test here"
						}
					}
				}
				stage('Security Test') {
					steps {
						container('gradle') {
							script {
								withMaven(maven: 'MAVEN-3.6.3') {
									FAILED_STAGE=env.STAGE_NAME
									echo 'I am running Security Test here'
								}
							}
						}
					}
				}
			}  
		}
	}
	post {
		always {
			script {
				if (propfile['javadoc'] == "true") {
					javadoc(javadocDir: "/$WORKSPACE/target/site/apidocs", keepAll: true)
				}
			}
		}
		failure {
			/*
			mail bcc: '', 
			body: "<b>Example</b><br>\n<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", 
			cc: '', 
			charset: 'UTF-8', 
			from: '', 
			mimeType: 'text/html', 
			replyTo: '', 
			subject: "ERROR CI: Project name -> ${env.JOB_NAME}", 
			to: "foo@foomail.com";
			*/
			echo "I am sending a notification with failure in the ${FAILED_STAGE} stage"
		}
		success {
			echo 'I am sending a notification with success'
		}
	}
}
